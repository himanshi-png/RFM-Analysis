{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\nimport matplotlib\nimport matplotlib.pyplot as plt",
      "metadata": {
        "trusted": true
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "project_name=\"RFM_Analysis\"",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "#Taking a look at the data\ndf=pd.read_csv('data.csv')\ndf.head(5)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 13,
      "outputs": [
        {
          "execution_count": 13,
          "output_type": "execute_result",
          "data": {
            "text/plain": "  InvoiceNo StockCode                          Description  Quantity  \\\n0    536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n1    536365     71053                  WHITE METAL LANTERN         6   \n2    536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n3    536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n4    536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n\n      InvoiceDate  UnitPrice  CustomerID         Country  \n0  12/1/2010 8:26       2.55     17850.0  United Kingdom  \n1  12/1/2010 8:26       3.39     17850.0  United Kingdom  \n2  12/1/2010 8:26       2.75     17850.0  United Kingdom  \n3  12/1/2010 8:26       3.39     17850.0  United Kingdom  \n4  12/1/2010 8:26       3.39     17850.0  United Kingdom  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>InvoiceNo</th>\n      <th>StockCode</th>\n      <th>Description</th>\n      <th>Quantity</th>\n      <th>InvoiceDate</th>\n      <th>UnitPrice</th>\n      <th>CustomerID</th>\n      <th>Country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>536365</td>\n      <td>85123A</td>\n      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n      <td>6</td>\n      <td>12/1/2010 8:26</td>\n      <td>2.55</td>\n      <td>17850.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>536365</td>\n      <td>71053</td>\n      <td>WHITE METAL LANTERN</td>\n      <td>6</td>\n      <td>12/1/2010 8:26</td>\n      <td>3.39</td>\n      <td>17850.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>536365</td>\n      <td>84406B</td>\n      <td>CREAM CUPID HEARTS COAT HANGER</td>\n      <td>8</td>\n      <td>12/1/2010 8:26</td>\n      <td>2.75</td>\n      <td>17850.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>536365</td>\n      <td>84029G</td>\n      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n      <td>6</td>\n      <td>12/1/2010 8:26</td>\n      <td>3.39</td>\n      <td>17850.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>536365</td>\n      <td>84029E</td>\n      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n      <td>6</td>\n      <td>12/1/2010 8:26</td>\n      <td>3.39</td>\n      <td>17850.0</td>\n      <td>United Kingdom</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# Here, I tried to take a closer look at the data where I found that there is exists null values in CustomerID which \ndf.info()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 16,
      "outputs": [
        {
          "name": "stdout",
          "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 37309 entries, 0 to 37308\nData columns (total 8 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   InvoiceNo    37309 non-null  object \n 1   StockCode    37309 non-null  object \n 2   Description  37192 non-null  object \n 3   Quantity     37309 non-null  int64  \n 4   InvoiceDate  37309 non-null  object \n 5   UnitPrice    37308 non-null  float64\n 6   CustomerID   24429 non-null  float64\n 7   Country      37308 non-null  object \ndtypes: float64(2), int64(1), object(5)\nmemory usage: 1.6+ MB\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#Creating a new table where I will use only the required columns for my snanlysis\ntable1=df[['InvoiceNo','CustomerID','InvoiceDate','UnitPrice','Quantity','Country']]",
      "metadata": {
        "trusted": true
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "# Creating a new column called Sales which gives the total sales from each customer made\ntable1['Sales']=table1['UnitPrice']*table1['Quantity']\n# Converting InvoiceDate into datetime\ntable1['InvoiceDate']=pd.to_datetime(table1['InvoiceDate'])\n# Removing all the NA values and assigning it to a new table called table2\ntable2=table1.dropna()\ntable2.info()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 18,
      "outputs": [
        {
          "name": "stderr",
          "text": "<ipython-input-18-07604019cc81>:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  table1['Sales']=table1['UnitPrice']*table1['Quantity']\n<ipython-input-18-07604019cc81>:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  table1['InvoiceDate']=pd.to_datetime(table1['InvoiceDate'])\n",
          "output_type": "stream"
        },
        {
          "name": "stdout",
          "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 24429 entries, 0 to 37307\nData columns (total 7 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   InvoiceNo    24429 non-null  object        \n 1   CustomerID   24429 non-null  float64       \n 2   InvoiceDate  24429 non-null  datetime64[ns]\n 3   UnitPrice    24429 non-null  float64       \n 4   Quantity     24429 non-null  int64         \n 5   Country      24429 non-null  object        \n 6   Sales        24429 non-null  float64       \ndtypes: datetime64[ns](1), float64(3), int64(1), object(2)\nmemory usage: 1.3+ MB\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "1. Recency (R): Days since last purchase: How many days ago was their last purchase",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Using current date and time to get today's date\nnow=datetime.now()\n# Creating a new table with 2 columns only which will help to calculate Recency\ndf_recency=table2[['CustomerID','InvoiceDate']].copy()\n# Used groupby function to group by the CustomerID and getting the maximum date which will help to calculate the days difference between today's date  and the last date since order for each customer\ndf_recency.groupby('CustomerID').agg({'InvoiceDate':['max']})\ndf2=df_recency.drop_duplicates(subset='CustomerID')\ndf2",
      "metadata": {
        "trusted": true
      },
      "execution_count": 19,
      "outputs": [
        {
          "execution_count": 19,
          "output_type": "execute_result",
          "data": {
            "text/plain": "       CustomerID         InvoiceDate\n0         17850.0 2010-12-01 08:26:00\n9         13047.0 2010-12-01 08:34:00\n26        12583.0 2010-12-01 08:45:00\n46        13748.0 2010-12-01 09:00:00\n65        15100.0 2010-12-01 09:09:00\n...           ...                 ...\n35206     12691.0 2010-12-17 14:46:00\n36166     13869.0 2010-12-17 15:14:00\n36210     14146.0 2010-12-17 15:52:00\n36251     12705.0 2010-12-17 15:58:00\n37280     16885.0 2010-12-17 17:23:00\n\n[898 rows x 2 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CustomerID</th>\n      <th>InvoiceDate</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>17850.0</td>\n      <td>2010-12-01 08:26:00</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>13047.0</td>\n      <td>2010-12-01 08:34:00</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>12583.0</td>\n      <td>2010-12-01 08:45:00</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>13748.0</td>\n      <td>2010-12-01 09:00:00</td>\n    </tr>\n    <tr>\n      <th>65</th>\n      <td>15100.0</td>\n      <td>2010-12-01 09:09:00</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>35206</th>\n      <td>12691.0</td>\n      <td>2010-12-17 14:46:00</td>\n    </tr>\n    <tr>\n      <th>36166</th>\n      <td>13869.0</td>\n      <td>2010-12-17 15:14:00</td>\n    </tr>\n    <tr>\n      <th>36210</th>\n      <td>14146.0</td>\n      <td>2010-12-17 15:52:00</td>\n    </tr>\n    <tr>\n      <th>36251</th>\n      <td>12705.0</td>\n      <td>2010-12-17 15:58:00</td>\n    </tr>\n    <tr>\n      <th>37280</th>\n      <td>16885.0</td>\n      <td>2010-12-17 17:23:00</td>\n    </tr>\n  </tbody>\n</table>\n<p>898 rows × 2 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# Created a new column Recency which consists the difference of days\ndf2['Recency']=(now-df2.InvoiceDate).dt.days\nRecency=df2.drop('InvoiceDate',axis=1)\nRecency",
      "metadata": {
        "trusted": true
      },
      "execution_count": 21,
      "outputs": [
        {
          "name": "stderr",
          "text": "<ipython-input-21-62078f4131d9>:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df2['Recency']=(now-df2.InvoiceDate).dt.days\n",
          "output_type": "stream"
        },
        {
          "execution_count": 21,
          "output_type": "execute_result",
          "data": {
            "text/plain": "       CustomerID  Recency\n0         17850.0     4596\n9         13047.0     4596\n26        12583.0     4596\n46        13748.0     4596\n65        15100.0     4596\n...           ...      ...\n35206     12691.0     4580\n36166     13869.0     4580\n36210     14146.0     4580\n36251     12705.0     4580\n37280     16885.0     4579\n\n[898 rows x 2 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CustomerID</th>\n      <th>Recency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>17850.0</td>\n      <td>4596</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>13047.0</td>\n      <td>4596</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>12583.0</td>\n      <td>4596</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>13748.0</td>\n      <td>4596</td>\n    </tr>\n    <tr>\n      <th>65</th>\n      <td>15100.0</td>\n      <td>4596</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>35206</th>\n      <td>12691.0</td>\n      <td>4580</td>\n    </tr>\n    <tr>\n      <th>36166</th>\n      <td>13869.0</td>\n      <td>4580</td>\n    </tr>\n    <tr>\n      <th>36210</th>\n      <td>14146.0</td>\n      <td>4580</td>\n    </tr>\n    <tr>\n      <th>36251</th>\n      <td>12705.0</td>\n      <td>4580</td>\n    </tr>\n    <tr>\n      <th>37280</th>\n      <td>16885.0</td>\n      <td>4579</td>\n    </tr>\n  </tbody>\n</table>\n<p>898 rows × 2 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "2. Monetary(M): Total money spent by customer",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Creating a new table with 2 columns only which will help to calculate Monetary\ndf_monetary=table2[['CustomerID','Sales']].copy()\n# Used groupby function to group by the CustomerID and getting the sum of amount spent by per customer\nMonetary=df_monetary.groupby('CustomerID',sort=False).sum().reset_index()\nMonetary",
      "metadata": {
        "trusted": true
      },
      "execution_count": 22,
      "outputs": [
        {
          "execution_count": 22,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     CustomerID    Sales\n0       17850.0  5391.21\n1       13047.0   366.63\n2       12583.0   855.86\n3       13748.0   204.00\n4       15100.0   492.75\n..          ...      ...\n893     12691.0   180.00\n894     13869.0   323.62\n895     14146.0  1241.43\n896     12705.0   858.00\n897     16885.0   176.80\n\n[898 rows x 2 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CustomerID</th>\n      <th>Sales</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>17850.0</td>\n      <td>5391.21</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>13047.0</td>\n      <td>366.63</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12583.0</td>\n      <td>855.86</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13748.0</td>\n      <td>204.00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>15100.0</td>\n      <td>492.75</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>893</th>\n      <td>12691.0</td>\n      <td>180.00</td>\n    </tr>\n    <tr>\n      <th>894</th>\n      <td>13869.0</td>\n      <td>323.62</td>\n    </tr>\n    <tr>\n      <th>895</th>\n      <td>14146.0</td>\n      <td>1241.43</td>\n    </tr>\n    <tr>\n      <th>896</th>\n      <td>12705.0</td>\n      <td>858.00</td>\n    </tr>\n    <tr>\n      <th>897</th>\n      <td>16885.0</td>\n      <td>176.80</td>\n    </tr>\n  </tbody>\n</table>\n<p>898 rows × 2 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "3.  Frequency: Total number of transactions: How many times has the customer purchased from our store?",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Creating a new table with 2 columns only which will help to calculate Frequency\ndf2=table2[['CustomerID','InvoiceNo']].copy()\n#  Used groupby function to group by the CustomerID and getting the total number of orders ordered per customer\nFrequency=df2.groupby(['CustomerID'],sort=False)['InvoiceNo'].count().reset_index()\nFrequency",
      "metadata": {
        "trusted": true
      },
      "execution_count": 23,
      "outputs": [
        {
          "execution_count": 23,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     CustomerID  InvoiceNo\n0       17850.0        297\n1       13047.0         17\n2       12583.0         20\n3       13748.0          1\n4       15100.0          4\n..          ...        ...\n893     12691.0          5\n894     13869.0         21\n895     14146.0         35\n896     12705.0         30\n897     16885.0         28\n\n[898 rows x 2 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CustomerID</th>\n      <th>InvoiceNo</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>17850.0</td>\n      <td>297</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>13047.0</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12583.0</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13748.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>15100.0</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>893</th>\n      <td>12691.0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>894</th>\n      <td>13869.0</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>895</th>\n      <td>14146.0</td>\n      <td>35</td>\n    </tr>\n    <tr>\n      <th>896</th>\n      <td>12705.0</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>897</th>\n      <td>16885.0</td>\n      <td>28</td>\n    </tr>\n  </tbody>\n</table>\n<p>898 rows × 2 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# Created a new table called df_rfm which will consist all 3 tables created and joining them bbased on left join on CustomerID column\ndf_rm=Monetary.merge(Recency,on='CustomerID',how='left')\ndf_rfm=Frequency.merge(df_rm,on='CustomerID',how='left')\ndf_rfm.rename(columns={'InvoiceNo':'Frequency','Sales':'Monetary','InvoiceDate':'Recency'},inplace=True)\ndf_rfm",
      "metadata": {
        "trusted": true
      },
      "execution_count": 24,
      "outputs": [
        {
          "execution_count": 24,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     CustomerID  Frequency  Monetary  Recency\n0       17850.0        297   5391.21     4596\n1       13047.0         17    366.63     4596\n2       12583.0         20    855.86     4596\n3       13748.0          1    204.00     4596\n4       15100.0          4    492.75     4596\n..          ...        ...       ...      ...\n893     12691.0          5    180.00     4580\n894     13869.0         21    323.62     4580\n895     14146.0         35   1241.43     4580\n896     12705.0         30    858.00     4580\n897     16885.0         28    176.80     4579\n\n[898 rows x 4 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CustomerID</th>\n      <th>Frequency</th>\n      <th>Monetary</th>\n      <th>Recency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>17850.0</td>\n      <td>297</td>\n      <td>5391.21</td>\n      <td>4596</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>13047.0</td>\n      <td>17</td>\n      <td>366.63</td>\n      <td>4596</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12583.0</td>\n      <td>20</td>\n      <td>855.86</td>\n      <td>4596</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13748.0</td>\n      <td>1</td>\n      <td>204.00</td>\n      <td>4596</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>15100.0</td>\n      <td>4</td>\n      <td>492.75</td>\n      <td>4596</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>893</th>\n      <td>12691.0</td>\n      <td>5</td>\n      <td>180.00</td>\n      <td>4580</td>\n    </tr>\n    <tr>\n      <th>894</th>\n      <td>13869.0</td>\n      <td>21</td>\n      <td>323.62</td>\n      <td>4580</td>\n    </tr>\n    <tr>\n      <th>895</th>\n      <td>14146.0</td>\n      <td>35</td>\n      <td>1241.43</td>\n      <td>4580</td>\n    </tr>\n    <tr>\n      <th>896</th>\n      <td>12705.0</td>\n      <td>30</td>\n      <td>858.00</td>\n      <td>4580</td>\n    </tr>\n    <tr>\n      <th>897</th>\n      <td>16885.0</td>\n      <td>28</td>\n      <td>176.80</td>\n      <td>4579</td>\n    </tr>\n  </tbody>\n</table>\n<p>898 rows × 4 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Calculating RFM scores using quantile-based discretization",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Calculating r_score,f_score,m_score\ndf_rfm['r_score']=pd.qcut(df_rfm['Recency'], q=5, labels=[1, 2, 3, 4, 5])\ndf_rfm['f_score']=pd.qcut(df_rfm['Frequency'], q=5, labels=[1, 2, 3, 4, 5])\ndf_rfm['m_score']=pd.qcut(df_rfm['Monetary'], q=5, labels=[1, 2, 3, 4, 5])",
      "metadata": {
        "trusted": true
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#Calculating the aggregating RFM_Score\ndf_rfm['RFM_score']=df_rfm['r_score'].astype(str) +df_rfm[\"f_score\"].astype(str) + df_rfm[\"m_score\"].astype(str)\ndf_rfm",
      "metadata": {
        "trusted": true
      },
      "execution_count": 28,
      "outputs": [
        {
          "execution_count": 28,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     CustomerID  Frequency  Monetary  Recency r_score f_score m_score  \\\n0       17850.0        297   5391.21     4596       5       5       5   \n1       13047.0         17    366.63     4596       5       3       4   \n2       12583.0         20    855.86     4596       5       3       5   \n3       13748.0          1    204.00     4596       5       1       2   \n4       15100.0          4    492.75     4596       5       1       4   \n..          ...        ...       ...      ...     ...     ...     ...   \n893     12691.0          5    180.00     4580       1       1       2   \n894     13869.0         21    323.62     4580       1       3       3   \n895     14146.0         35   1241.43     4580       1       4       5   \n896     12705.0         30    858.00     4580       1       4       5   \n897     16885.0         28    176.80     4579       1       4       2   \n\n    RFM_score  \n0         555  \n1         534  \n2         535  \n3         512  \n4         514  \n..        ...  \n893       112  \n894       133  \n895       145  \n896       145  \n897       142  \n\n[898 rows x 8 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CustomerID</th>\n      <th>Frequency</th>\n      <th>Monetary</th>\n      <th>Recency</th>\n      <th>r_score</th>\n      <th>f_score</th>\n      <th>m_score</th>\n      <th>RFM_score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>17850.0</td>\n      <td>297</td>\n      <td>5391.21</td>\n      <td>4596</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>555</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>13047.0</td>\n      <td>17</td>\n      <td>366.63</td>\n      <td>4596</td>\n      <td>5</td>\n      <td>3</td>\n      <td>4</td>\n      <td>534</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12583.0</td>\n      <td>20</td>\n      <td>855.86</td>\n      <td>4596</td>\n      <td>5</td>\n      <td>3</td>\n      <td>5</td>\n      <td>535</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13748.0</td>\n      <td>1</td>\n      <td>204.00</td>\n      <td>4596</td>\n      <td>5</td>\n      <td>1</td>\n      <td>2</td>\n      <td>512</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>15100.0</td>\n      <td>4</td>\n      <td>492.75</td>\n      <td>4596</td>\n      <td>5</td>\n      <td>1</td>\n      <td>4</td>\n      <td>514</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>893</th>\n      <td>12691.0</td>\n      <td>5</td>\n      <td>180.00</td>\n      <td>4580</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>112</td>\n    </tr>\n    <tr>\n      <th>894</th>\n      <td>13869.0</td>\n      <td>21</td>\n      <td>323.62</td>\n      <td>4580</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>133</td>\n    </tr>\n    <tr>\n      <th>895</th>\n      <td>14146.0</td>\n      <td>35</td>\n      <td>1241.43</td>\n      <td>4580</td>\n      <td>1</td>\n      <td>4</td>\n      <td>5</td>\n      <td>145</td>\n    </tr>\n    <tr>\n      <th>896</th>\n      <td>12705.0</td>\n      <td>30</td>\n      <td>858.00</td>\n      <td>4580</td>\n      <td>1</td>\n      <td>4</td>\n      <td>5</td>\n      <td>145</td>\n    </tr>\n    <tr>\n      <th>897</th>\n      <td>16885.0</td>\n      <td>28</td>\n      <td>176.80</td>\n      <td>4579</td>\n      <td>1</td>\n      <td>4</td>\n      <td>2</td>\n      <td>142</td>\n    </tr>\n  </tbody>\n</table>\n<p>898 rows × 8 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# Assigning the segments based on the rfm_score\nseg_map = {\n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At Risk',\n    r'[1-2]5': 'Can\\'t Loose',\n    r'3[1-2]': 'About to Sleep',\n    r'33': 'Need Attention',\n    r'[3-4][4-5]': 'Loyal Customers',\n    r'41': 'Promising',\n    r'51': 'New Customers',\n    r'[4-5][2-3]': 'Potential Loyalists',\n    r'5[4-5]': 'Champions'\n}",
      "metadata": {
        "trusted": true
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "df_rfm['Segment'] = df_rfm['r_score'].astype(str) + df_rfm['f_score'].astype(str)\ndf_rfm['Segment'] = df_rfm['Segment'].replace(seg_map, regex=True)\ndf_rfm.head()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 30,
      "outputs": [
        {
          "execution_count": 30,
          "output_type": "execute_result",
          "data": {
            "text/plain": "   CustomerID  Frequency  Monetary  Recency r_score f_score m_score RFM_score  \\\n0     17850.0        297   5391.21     4596       5       5       5       555   \n1     13047.0         17    366.63     4596       5       3       4       534   \n2     12583.0         20    855.86     4596       5       3       5       535   \n3     13748.0          1    204.00     4596       5       1       2       512   \n4     15100.0          4    492.75     4596       5       1       4       514   \n\n               Segment  \n0            Champions  \n1  Potential Loyalists  \n2  Potential Loyalists  \n3        New Customers  \n4        New Customers  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CustomerID</th>\n      <th>Frequency</th>\n      <th>Monetary</th>\n      <th>Recency</th>\n      <th>r_score</th>\n      <th>f_score</th>\n      <th>m_score</th>\n      <th>RFM_score</th>\n      <th>Segment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>17850.0</td>\n      <td>297</td>\n      <td>5391.21</td>\n      <td>4596</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>555</td>\n      <td>Champions</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>13047.0</td>\n      <td>17</td>\n      <td>366.63</td>\n      <td>4596</td>\n      <td>5</td>\n      <td>3</td>\n      <td>4</td>\n      <td>534</td>\n      <td>Potential Loyalists</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12583.0</td>\n      <td>20</td>\n      <td>855.86</td>\n      <td>4596</td>\n      <td>5</td>\n      <td>3</td>\n      <td>5</td>\n      <td>535</td>\n      <td>Potential Loyalists</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13748.0</td>\n      <td>1</td>\n      <td>204.00</td>\n      <td>4596</td>\n      <td>5</td>\n      <td>1</td>\n      <td>2</td>\n      <td>512</td>\n      <td>New Customers</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>15100.0</td>\n      <td>4</td>\n      <td>492.75</td>\n      <td>4596</td>\n      <td>5</td>\n      <td>1</td>\n      <td>4</td>\n      <td>514</td>\n      <td>New Customers</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Finding the Country where customers are from and distribution of segment in each customer",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "#Added Country to a new table for the analysis\ndf_segment=df_rfm.assign(Country=table1.Country,CustomerID=table1.CustomerID)\ndf_segment",
      "metadata": {
        "trusted": true
      },
      "execution_count": 32,
      "outputs": [
        {
          "execution_count": 32,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     CustomerID  Frequency  Monetary  Recency r_score f_score m_score  \\\n0       17850.0        297   5391.21     4596       5       5       5   \n1       17850.0         17    366.63     4596       5       3       4   \n2       17850.0         20    855.86     4596       5       3       5   \n3       17850.0          1    204.00     4596       5       1       2   \n4       17850.0          4    492.75     4596       5       1       4   \n..          ...        ...       ...      ...     ...     ...     ...   \n893     17897.0          5    180.00     4580       1       1       2   \n894     17897.0         21    323.62     4580       1       3       3   \n895     17897.0         35   1241.43     4580       1       4       5   \n896     17897.0         30    858.00     4580       1       4       5   \n897     17897.0         28    176.80     4579       1       4       2   \n\n    RFM_score              Segment         Country  \n0         555            Champions  United Kingdom  \n1         534  Potential Loyalists  United Kingdom  \n2         535  Potential Loyalists  United Kingdom  \n3         512        New Customers  United Kingdom  \n4         514        New Customers  United Kingdom  \n..        ...                  ...             ...  \n893       112          Hibernating  United Kingdom  \n894       133              At Risk  United Kingdom  \n895       145              At Risk  United Kingdom  \n896       145              At Risk  United Kingdom  \n897       142              At Risk  United Kingdom  \n\n[898 rows x 10 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CustomerID</th>\n      <th>Frequency</th>\n      <th>Monetary</th>\n      <th>Recency</th>\n      <th>r_score</th>\n      <th>f_score</th>\n      <th>m_score</th>\n      <th>RFM_score</th>\n      <th>Segment</th>\n      <th>Country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>17850.0</td>\n      <td>297</td>\n      <td>5391.21</td>\n      <td>4596</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>555</td>\n      <td>Champions</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>17850.0</td>\n      <td>17</td>\n      <td>366.63</td>\n      <td>4596</td>\n      <td>5</td>\n      <td>3</td>\n      <td>4</td>\n      <td>534</td>\n      <td>Potential Loyalists</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>17850.0</td>\n      <td>20</td>\n      <td>855.86</td>\n      <td>4596</td>\n      <td>5</td>\n      <td>3</td>\n      <td>5</td>\n      <td>535</td>\n      <td>Potential Loyalists</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>17850.0</td>\n      <td>1</td>\n      <td>204.00</td>\n      <td>4596</td>\n      <td>5</td>\n      <td>1</td>\n      <td>2</td>\n      <td>512</td>\n      <td>New Customers</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>17850.0</td>\n      <td>4</td>\n      <td>492.75</td>\n      <td>4596</td>\n      <td>5</td>\n      <td>1</td>\n      <td>4</td>\n      <td>514</td>\n      <td>New Customers</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>893</th>\n      <td>17897.0</td>\n      <td>5</td>\n      <td>180.00</td>\n      <td>4580</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>112</td>\n      <td>Hibernating</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>894</th>\n      <td>17897.0</td>\n      <td>21</td>\n      <td>323.62</td>\n      <td>4580</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>133</td>\n      <td>At Risk</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>895</th>\n      <td>17897.0</td>\n      <td>35</td>\n      <td>1241.43</td>\n      <td>4580</td>\n      <td>1</td>\n      <td>4</td>\n      <td>5</td>\n      <td>145</td>\n      <td>At Risk</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>896</th>\n      <td>17897.0</td>\n      <td>30</td>\n      <td>858.00</td>\n      <td>4580</td>\n      <td>1</td>\n      <td>4</td>\n      <td>5</td>\n      <td>145</td>\n      <td>At Risk</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>897</th>\n      <td>17897.0</td>\n      <td>28</td>\n      <td>176.80</td>\n      <td>4579</td>\n      <td>1</td>\n      <td>4</td>\n      <td>2</td>\n      <td>142</td>\n      <td>At Risk</td>\n      <td>United Kingdom</td>\n    </tr>\n  </tbody>\n</table>\n<p>898 rows × 10 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# Used groupby function to find where most Customers are from and of which category\ntable4=df_segment.groupby(['Segment','Country'])['CustomerID'].count()\ntable4",
      "metadata": {
        "trusted": true
      },
      "execution_count": 33,
      "outputs": [
        {
          "execution_count": 33,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Segment              Country       \nAbout to Sleep       Netherlands         2\n                     United Kingdom     91\nAt Risk              United Kingdom    144\nCan't Loose          United Kingdom     49\nChampions            France             13\n                     United Kingdom     61\nHibernating          United Kingdom    167\nLoyal Customers      Australia           4\n                     United Kingdom    155\nNeed Attention       United Kingdom     40\nNew Customers        France              5\n                     United Kingdom     22\nPotential Loyalists  Australia           6\n                     France              2\n                     United Kingdom    108\nPromising            Australia           4\n                     United Kingdom     24\nName: CustomerID, dtype: int64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#Used plotly library to get a stacked bar chart which conveys where most customers are from and of which Segment",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "df_segment.groupby(['Segment','Country'])['CustomerID'].count().unstack().plot(kind='bar',stacked='True')",
      "metadata": {
        "trusted": true
      },
      "execution_count": 34,
      "outputs": [
        {
          "execution_count": 34,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='Segment'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}